{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nexport const roleGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const requiredRoles = route.data?.['roles'];\n  if (!requiredRoles || requiredRoles.length === 0) {\n    return true;\n  }\n  if (authService.hasAnyRole(requiredRoles)) {\n    return true;\n  }\n  // Redirect to appropriate dashboard based on user role\n  const user = authService.getCurrentUser();\n  if (user) {\n    if (user.roles.includes('ROLE_SUPER_ADMIN')) {\n      router.navigate(['/super-admin-dashboard']);\n    } else if (user.roles.includes('ROLE_ADMIN')) {\n      router.navigate(['/admin-dashboard']);\n    } else if (user.roles.includes('ROLE_CLEANER')) {\n      router.navigate(['/cleaner-dashboard']);\n    } else if (user.roles.includes('ROLE_CUSTOMER')) {\n      router.navigate(['/customer-dashboard']);\n    }\n  } else {\n    router.navigate(['/login']);\n  }\n  return false;\n};","map":{"version":3,"names":["inject","Router","AuthService","roleGuard","route","state","authService","router","requiredRoles","data","length","hasAnyRole","user","getCurrentUser","roles","includes","navigate"],"sources":["C:\\WebApps_Proj\\cleaningservice\\webstore\\src\\app\\guards\\role.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\nexport const roleGuard: CanActivateFn = (route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  const requiredRoles = route.data?.['roles'] as string[];\r\n  \r\n  if (!requiredRoles || requiredRoles.length === 0) {\r\n    return true;\r\n  }\r\n\r\n  if (authService.hasAnyRole(requiredRoles)) {\r\n    return true;\r\n  }\r\n\r\n  // Redirect to appropriate dashboard based on user role\r\n  const user = authService.getCurrentUser();\r\n  if (user) {\r\n    if (user.roles.includes('ROLE_SUPER_ADMIN')) {\r\n      router.navigate(['/super-admin-dashboard']);\r\n    } else if (user.roles.includes('ROLE_ADMIN')) {\r\n      router.navigate(['/admin-dashboard']);\r\n    } else if (user.roles.includes('ROLE_CLEANER')) {\r\n      router.navigate(['/cleaner-dashboard']);\r\n    } else if (user.roles.includes('ROLE_CUSTOMER')) {\r\n      router.navigate(['/customer-dashboard']);\r\n    }\r\n  } else {\r\n    router.navigate(['/login']);\r\n  }\r\n\r\n  return false;\r\n};\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,WAAW,QAAQ,0BAA0B;AAEtD,OAAO,MAAMC,SAAS,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACvD,MAAMC,WAAW,GAAGN,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMK,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC;EAE7B,MAAMO,aAAa,GAAGJ,KAAK,CAACK,IAAI,GAAG,OAAO,CAAa;EAEvD,IAAI,CAACD,aAAa,IAAIA,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;IAChD,OAAO,IAAI;;EAGb,IAAIJ,WAAW,CAACK,UAAU,CAACH,aAAa,CAAC,EAAE;IACzC,OAAO,IAAI;;EAGb;EACA,MAAMI,IAAI,GAAGN,WAAW,CAACO,cAAc,EAAE;EACzC,IAAID,IAAI,EAAE;IACR,IAAIA,IAAI,CAACE,KAAK,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3CR,MAAM,CAACS,QAAQ,CAAC,CAAC,wBAAwB,CAAC,CAAC;KAC5C,MAAM,IAAIJ,IAAI,CAACE,KAAK,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;MAC5CR,MAAM,CAACS,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;KACtC,MAAM,IAAIJ,IAAI,CAACE,KAAK,CAACC,QAAQ,CAAC,cAAc,CAAC,EAAE;MAC9CR,MAAM,CAACS,QAAQ,CAAC,CAAC,oBAAoB,CAAC,CAAC;KACxC,MAAM,IAAIJ,IAAI,CAACE,KAAK,CAACC,QAAQ,CAAC,eAAe,CAAC,EAAE;MAC/CR,MAAM,CAACS,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;;GAE3C,MAAM;IACLT,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAG7B,OAAO,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}