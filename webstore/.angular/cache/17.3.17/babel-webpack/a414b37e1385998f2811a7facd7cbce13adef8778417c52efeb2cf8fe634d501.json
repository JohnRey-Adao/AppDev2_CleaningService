{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet CustomerDashboardComponent = class CustomerDashboardComponent {\n  constructor(http) {\n    this.http = http;\n    this.customer = null;\n    this.bookings = [];\n    this.availableCleaners = [];\n    this.totalBookings = 0;\n    this.pendingBookings = 0;\n    this.completedBookings = 0;\n    this.totalSpent = 0;\n    this.showBookingForm = false;\n    this.activeTab = 'overview';\n    this.selectedCleanerId = null;\n    this.bookingDate = '';\n    this.durationHours = 2;\n    this.specialInstructions = '';\n  }\n  ngOnInit() {\n    this.loadCustomerData();\n    this.loadBookings();\n    this.loadAvailableCleaners();\n  }\n  setActiveTab(tabName) {\n    this.activeTab = tabName;\n  }\n  loadCustomerData() {\n    // In a real app, you'd get the current user's ID from the auth service\n    const customerId = 1; // This should come from the logged-in user\n    this.http.get(`http://localhost:8080/api/customers/${customerId}`).subscribe({\n      next: customer => {\n        this.customer = customer;\n      },\n      error: error => {\n        console.error('Error loading customer data:', error);\n      }\n    });\n  }\n  loadBookings() {\n    const customerId = 1; // This should come from the logged-in user\n    this.http.get(`http://localhost:8080/api/bookings/customer/${customerId}`).subscribe({\n      next: bookings => {\n        this.bookings = bookings;\n        this.calculateStats();\n      },\n      error: error => {\n        console.error('Error loading bookings:', error);\n      }\n    });\n  }\n  loadAvailableCleaners() {\n    this.http.get('http://localhost:8080/api/cleaners/available').subscribe({\n      next: cleaners => {\n        this.availableCleaners = cleaners;\n      },\n      error: error => {\n        console.error('Error loading cleaners:', error);\n      }\n    });\n  }\n  calculateStats() {\n    this.totalBookings = this.bookings.length;\n    this.pendingBookings = this.bookings.filter(b => b.status === 'PENDING').length;\n    this.completedBookings = this.bookings.filter(b => b.status === 'COMPLETED').length;\n    this.totalSpent = this.bookings.filter(b => b.status === 'COMPLETED').reduce((sum, b) => sum + b.totalAmount, 0);\n  }\n  createBooking() {\n    if (!this.selectedCleanerId || !this.bookingDate) return;\n    const bookingRequest = {\n      customerId: this.customer?.id,\n      cleanerId: this.selectedCleanerId,\n      bookingDate: this.bookingDate,\n      durationHours: this.durationHours,\n      specialInstructions: this.specialInstructions,\n      serviceAddress: this.customer?.address\n    };\n    this.http.post('http://localhost:8080/api/bookings', bookingRequest).subscribe({\n      next: () => {\n        this.loadBookings();\n        this.showBookingForm = false;\n        this.resetBookingForm();\n      },\n      error: error => {\n        console.error('Error creating booking:', error);\n      }\n    });\n  }\n  cancelBooking(bookingId) {\n    this.http.put(`http://localhost:8080/api/bookings/${bookingId}/cancel`, {}).subscribe({\n      next: () => {\n        this.loadBookings();\n      },\n      error: error => {\n        console.error('Error cancelling booking:', error);\n      }\n    });\n  }\n  resetBookingForm() {\n    this.selectedCleanerId = null;\n    this.bookingDate = '';\n    this.durationHours = 2;\n    this.specialInstructions = '';\n  }\n  formatDate(dateString) {\n    return new Date(dateString).toLocaleDateString();\n  }\n  getStatusClass(status) {\n    switch (status) {\n      case 'PENDING':\n        return 'bg-warning';\n      case 'CONFIRMED':\n        return 'bg-info';\n      case 'IN_PROGRESS':\n        return 'bg-primary';\n      case 'COMPLETED':\n        return 'bg-success';\n      case 'CANCELLED':\n        return 'bg-danger';\n      default:\n        return 'bg-secondary';\n    }\n  }\n};\nCustomerDashboardComponent = __decorate([Component({\n  selector: 'app-customer-dashboard',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './customer-dashboard.component.html',\n  styles: []\n})], CustomerDashboardComponent);\nexport { CustomerDashboardComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","CustomerDashboardComponent","constructor","http","customer","bookings","availableCleaners","totalBookings","pendingBookings","completedBookings","totalSpent","showBookingForm","activeTab","selectedCleanerId","bookingDate","durationHours","specialInstructions","ngOnInit","loadCustomerData","loadBookings","loadAvailableCleaners","setActiveTab","tabName","customerId","get","subscribe","next","error","console","calculateStats","cleaners","length","filter","b","status","reduce","sum","totalAmount","createBooking","bookingRequest","id","cleanerId","serviceAddress","address","post","resetBookingForm","cancelBooking","bookingId","put","formatDate","dateString","Date","toLocaleDateString","getStatusClass","__decorate","selector","standalone","imports","templateUrl","styles"],"sources":["C:\\WebApps_Proj\\cleaningservice\\webstore\\src\\app\\components\\dashboard\\customer-dashboard\\customer-dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Customer, Cleaner, Booking } from '../../../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-customer-dashboard',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './customer-dashboard.component.html',\r\n  styles: []\r\n})\r\nexport class CustomerDashboardComponent implements OnInit {\r\n  customer: Customer | null = null;\r\n  bookings: Booking[] = [];\r\n  availableCleaners: Cleaner[] = [];\r\n  totalBookings = 0;\r\n  pendingBookings = 0;\r\n  completedBookings = 0;\r\n  totalSpent = 0;\r\n  showBookingForm = false;\r\n  activeTab = 'overview';\r\n  \r\n  selectedCleanerId: number | null = null;\r\n  bookingDate = '';\r\n  durationHours = 2;\r\n  specialInstructions = '';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit() {\r\n    this.loadCustomerData();\r\n    this.loadBookings();\r\n    this.loadAvailableCleaners();\r\n  }\r\n\r\n  setActiveTab(tabName: string) {\r\n    this.activeTab = tabName;\r\n  }\r\n\r\n  loadCustomerData() {\r\n    // In a real app, you'd get the current user's ID from the auth service\r\n    const customerId = 1; // This should come from the logged-in user\r\n    this.http.get<Customer>(`http://localhost:8080/api/customers/${customerId}`).subscribe({\r\n      next: (customer) => {\r\n        this.customer = customer;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading customer data:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadBookings() {\r\n    const customerId = 1; // This should come from the logged-in user\r\n    this.http.get<Booking[]>(`http://localhost:8080/api/bookings/customer/${customerId}`).subscribe({\r\n      next: (bookings) => {\r\n        this.bookings = bookings;\r\n        this.calculateStats();\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading bookings:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadAvailableCleaners() {\r\n    this.http.get<Cleaner[]>('http://localhost:8080/api/cleaners/available').subscribe({\r\n      next: (cleaners) => {\r\n        this.availableCleaners = cleaners;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading cleaners:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  calculateStats() {\r\n    this.totalBookings = this.bookings.length;\r\n    this.pendingBookings = this.bookings.filter(b => b.status === 'PENDING').length;\r\n    this.completedBookings = this.bookings.filter(b => b.status === 'COMPLETED').length;\r\n    this.totalSpent = this.bookings\r\n      .filter(b => b.status === 'COMPLETED')\r\n      .reduce((sum, b) => sum + b.totalAmount, 0);\r\n  }\r\n\r\n  createBooking() {\r\n    if (!this.selectedCleanerId || !this.bookingDate) return;\r\n\r\n    const bookingRequest = {\r\n      customerId: this.customer?.id,\r\n      cleanerId: this.selectedCleanerId,\r\n      bookingDate: this.bookingDate,\r\n      durationHours: this.durationHours,\r\n      specialInstructions: this.specialInstructions,\r\n      serviceAddress: this.customer?.address\r\n    };\r\n\r\n    this.http.post('http://localhost:8080/api/bookings', bookingRequest).subscribe({\r\n      next: () => {\r\n        this.loadBookings();\r\n        this.showBookingForm = false;\r\n        this.resetBookingForm();\r\n      },\r\n      error: (error) => {\r\n        console.error('Error creating booking:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  cancelBooking(bookingId: number) {\r\n    this.http.put(`http://localhost:8080/api/bookings/${bookingId}/cancel`, {}).subscribe({\r\n      next: () => {\r\n        this.loadBookings();\r\n      },\r\n      error: (error) => {\r\n        console.error('Error cancelling booking:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  resetBookingForm() {\r\n    this.selectedCleanerId = null;\r\n    this.bookingDate = '';\r\n    this.durationHours = 2;\r\n    this.specialInstructions = '';\r\n  }\r\n\r\n  formatDate(dateString: string): string {\r\n    return new Date(dateString).toLocaleDateString();\r\n  }\r\n\r\n  getStatusClass(status: string): string {\r\n    switch (status) {\r\n      case 'PENDING': return 'bg-warning';\r\n      case 'CONFIRMED': return 'bg-info';\r\n      case 'IN_PROGRESS': return 'bg-primary';\r\n      case 'COMPLETED': return 'bg-success';\r\n      case 'CANCELLED': return 'bg-danger';\r\n      default: return 'bg-secondary';\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}