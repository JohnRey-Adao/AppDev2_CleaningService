{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.API_URL = 'http://localhost:8080/api';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('currentUser');\n    if (token && user) {\n      this.currentUserSubject.next(JSON.parse(user));\n    }\n  }\n  login(loginRequest) {\n    return this.http.post(`${this.API_URL}/auth/signin`, loginRequest).pipe(tap(response => {\n      localStorage.setItem('token', response.accessToken);\n      localStorage.setItem('currentUser', JSON.stringify(response));\n      this.currentUserSubject.next(response);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    // Ensure the user is redirected out of protected routes immediately\n    this.router.navigate(['/login']);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return user ? user.roles.includes(role) : false;\n  }\n  hasAnyRole(roles) {\n    const user = this.getCurrentUser();\n    return user ? roles.some(role => user.roles.includes(role)) : false;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","router","API_URL","currentUserSubject","currentUser$","asObservable","token","localStorage","getItem","user","next","JSON","parse","login","loginRequest","post","pipe","response","setItem","accessToken","stringify","logout","removeItem","navigate","getCurrentUser","value","getToken","isLoggedIn","hasRole","role","roles","includes","hasAnyRole","some","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\WebApps_Proj\\cleaningservice\\webstore\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { LoginRequest, JwtResponse } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n  private currentUserSubject = new BehaviorSubject<JwtResponse | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    // Check if user is already logged in\r\n    const token = localStorage.getItem('token');\r\n    const user = localStorage.getItem('currentUser');\r\n    if (token && user) {\r\n      this.currentUserSubject.next(JSON.parse(user));\r\n    }\r\n  }\r\n\r\n  login(loginRequest: LoginRequest): Observable<JwtResponse> {\r\n    return this.http.post<JwtResponse>(`${this.API_URL}/auth/signin`, loginRequest)\r\n      .pipe(\r\n        tap(response => {\r\n          localStorage.setItem('token', response.accessToken);\r\n          localStorage.setItem('currentUser', JSON.stringify(response));\r\n          this.currentUserSubject.next(response);\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('currentUser');\r\n    this.currentUserSubject.next(null);\r\n    // Ensure the user is redirected out of protected routes immediately\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  getCurrentUser(): JwtResponse | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  hasRole(role: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user ? user.roles.includes(role) : false;\r\n  }\r\n\r\n  hasAnyRole(roles: string[]): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user ? roles.some(role => user.roles.includes(role)) : false;\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;;AAMvD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAJnC,KAAAC,OAAO,GAAG,2BAA2B;IAC9C,KAAAC,kBAAkB,GAAG,IAAIP,eAAe,CAAqB,IAAI,CAAC;IACnE,KAAAQ,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,IAAI,GAAGF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAChD,IAAIF,KAAK,IAAIG,IAAI,EAAE;MACjB,IAAI,CAACN,kBAAkB,CAACO,IAAI,CAACC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,CAAC;;EAElD;EAEAI,KAAKA,CAACC,YAA0B;IAC9B,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAc,GAAG,IAAI,CAACb,OAAO,cAAc,EAAEY,YAAY,CAAC,CAC5EE,IAAI,CACHnB,GAAG,CAACoB,QAAQ,IAAG;MACbV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACE,WAAW,CAAC;MACnDZ,YAAY,CAACW,OAAO,CAAC,aAAa,EAAEP,IAAI,CAACS,SAAS,CAACH,QAAQ,CAAC,CAAC;MAC7D,IAAI,CAACd,kBAAkB,CAACO,IAAI,CAACO,QAAQ,CAAC;IACxC,CAAC,CAAC,CACH;EACL;EAEAI,MAAMA,CAAA;IACJd,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAChCf,YAAY,CAACe,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACnB,kBAAkB,CAACO,IAAI,CAAC,IAAI,CAAC;IAClC;IACA,IAAI,CAACT,MAAM,CAACsB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACrB,kBAAkB,CAACsB,KAAK;EACtC;EAEAC,QAAQA,CAAA;IACN,OAAOnB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAmB,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACD,QAAQ,EAAE;EAC1B;EAEAE,OAAOA,CAACC,IAAY;IAClB,MAAMpB,IAAI,GAAG,IAAI,CAACe,cAAc,EAAE;IAClC,OAAOf,IAAI,GAAGA,IAAI,CAACqB,KAAK,CAACC,QAAQ,CAACF,IAAI,CAAC,GAAG,KAAK;EACjD;EAEAG,UAAUA,CAACF,KAAe;IACxB,MAAMrB,IAAI,GAAG,IAAI,CAACe,cAAc,EAAE;IAClC,OAAOf,IAAI,GAAGqB,KAAK,CAACG,IAAI,CAACJ,IAAI,IAAIpB,IAAI,CAACqB,KAAK,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC,GAAG,KAAK;EACrE;;;uBArDW/B,WAAW,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXzC,WAAW;MAAA0C,OAAA,EAAX1C,WAAW,CAAA2C,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}